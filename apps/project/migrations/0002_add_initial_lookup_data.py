# Generated by Django 5.1.4 on 2024-12-24 19:25

from django.db import migrations
from django.utils import timezone

def create_lookup_categories(apps, schema_editor):
    LookupCategory = apps.get_model('core', 'LookupCategory')
    LookupValue = apps.get_model('core', 'LookupValue')

    # Create categories
    categories = {
        'INDUSTRY': {
            'name': 'Industry',
            'description': 'Client industry sectors',
            'values': [
                ('TECH', 'Technology', 'Technology and Software', 10),
                ('FIN', 'Financial Services', 'Banking, Insurance, and Financial Services', 20),
                ('HEALTH', 'Healthcare', 'Healthcare and Medical Services', 30),
                ('RETAIL', 'Retail', 'Retail and E-commerce', 40),
                ('MFG', 'Manufacturing', 'Manufacturing and Industrial', 50),
                ('EDU', 'Education', 'Education and Training', 60),
                ('GOV', 'Government', 'Government and Public Sector', 70),
                ('NPO', 'Non-Profit', 'Non-Profit Organizations', 80),
                ('OTHER', 'Other', 'Other Industries', 90),
            ]
        },
        'PROJECT_STATUS': {
            'name': 'Project Status',
            'description': 'Status of projects',
            'values': [
                ('DRAFT', 'Draft', 'Project is in draft/planning stage', 10),
                ('ACTIVE', 'Active', 'Project is currently active', 20),
                ('ON_HOLD', 'On Hold', 'Project is temporarily on hold', 30),
                ('COMPLETED', 'Completed', 'Project has been completed', 40),
                ('CANCELLED', 'Cancelled', 'Project has been cancelled', 50),
            ]
        },
        'TASK_STATUS': {
            'name': 'Task Status',
            'description': 'Status of tasks',
            'values': [
                ('TODO', 'To Do', 'Task needs to be started', 10),
                ('IN_PROGRESS', 'In Progress', 'Task is currently being worked on', 20),
                ('REVIEW', 'In Review', 'Task is being reviewed', 30),
                ('BLOCKED', 'Blocked', 'Task is blocked by dependencies', 40),
                ('COMPLETED', 'Completed', 'Task has been completed', 50),
                ('CANCELLED', 'Cancelled', 'Task has been cancelled', 60),
            ]
        },
        'PRIORITY': {
            'name': 'Priority',
            'description': 'Priority levels for projects and tasks',
            'values': [
                ('LOW', 'Low', 'Low priority', 10),
                ('MEDIUM', 'Medium', 'Medium priority', 20),
                ('HIGH', 'High', 'High priority', 30),
                ('URGENT', 'Urgent', 'Urgent priority', 40),
                ('CRITICAL', 'Critical', 'Critical priority', 50),
            ]
        },
        'PROJECT_ROLE': {
            'name': 'Project Role',
            'description': 'Roles that team members can have on projects',
            'values': [
                ('PM', 'Project Manager', 'Manages the project and team', 10),
                ('TECH_LEAD', 'Technical Lead', 'Technical leadership and architecture', 20),
                ('DEV', 'Developer', 'Software development', 30),
                ('DESIGNER', 'Designer', 'UI/UX design', 40),
                ('QA', 'QA Engineer', 'Quality assurance and testing', 50),
                ('BA', 'Business Analyst', 'Business analysis and requirements', 60),
                ('CONSULTANT', 'Consultant', 'Domain expert consultant', 70),
            ]
        },
        'BILLING_STATUS': {
            'name': 'Billing Status',
            'description': 'Status of time entries for billing',
            'values': [
                ('UNBILLED', 'Unbilled', 'Time entry has not been billed', 10),
                ('READY', 'Ready to Bill', 'Time entry is ready for billing', 20),
                ('BILLED', 'Billed', 'Time entry has been billed', 30),
                ('PAID', 'Paid', 'Time entry has been paid', 40),
                ('NON_BILLABLE', 'Non-Billable', 'Time entry is not billable', 50),
                ('DISPUTED', 'Disputed', 'Time entry is under dispute', 60),
            ]
        },
    }

    for code, category_data in categories.items():
        category = LookupCategory.objects.create(
            code=code,
            name=category_data['name'],
            description=category_data['description'],
            is_system=True
        )

        for value_data in category_data['values']:
            LookupValue.objects.create(
                category=category,
                code=value_data[0],
                name=value_data[1],
                description=value_data[2],
                sort_order=value_data[3]
            )

def remove_lookup_categories(apps, schema_editor):
    LookupCategory = apps.get_model('core', 'LookupCategory')
    categories = ['INDUSTRY', 'PROJECT_STATUS', 'TASK_STATUS', 'PRIORITY', 'PROJECT_ROLE', 'BILLING_STATUS']
    LookupCategory.objects.filter(code__in=categories).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('project', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_lookup_categories, remove_lookup_categories),
    ]
